{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","defaultSessionTime","useState","secondsLeft","setSecondsLeft","timer","setTimer","breakSecondsLeft","setBreakSecondsLeft","breakTimer","setBreakTimer","breakLength","setBreakLength","sessionLength","setSessionLength","isTimerOn","setIsTimerOn","isOnBreak","setIsOnBreak","myAudio","useRef","startTimer","setInterval","startBreakTimer","console","log","stopTimer","clearInterval","useEffect","current","play","className","id","onClick","seconds","mins","Math","floor","secs","convertSecsToMins","ref","src","type","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gNAwKeA,MApKf,WAEE,IACMC,EAAqB,KAHd,EAKyBC,mBAASD,GALlC,mBAKNE,EALM,KAKOC,EALP,OAMaF,qBANb,mBAMNG,EANM,KAMCC,EAND,OAOmCJ,mBALvB,KAFZ,mBAONK,EAPM,KAOYC,EAPZ,OAQuBN,qBARvB,mBAQNO,EARM,KAQMC,EARN,OASyBR,mBAPb,KAFZ,mBASNS,EATM,KASOC,EATP,OAU6BV,mBAASD,GAVtC,mBAUNY,EAVM,KAUSC,EAVT,OAWqBZ,oBAAS,GAX9B,mBAWNa,EAXM,KAWKC,EAXL,OAYqBd,oBAAS,GAZ9B,mBAYNe,EAZM,KAYKC,EAZL,KAaPC,EAAUC,mBAGhB,SAASC,IACPL,GAAa,GACb,IAAMX,EAAQiB,aAAY,WACxBlB,GAAe,SAACD,GAAD,OAAiBA,EAAc,OAC7C,KACHG,EAASD,GAGX,SAASkB,IACPC,QAAQC,IAAI,eAAgBV,GAC5BC,GAAa,GACb,IAAMP,EAAaa,aAAY,WAC7Bd,GAAoB,SAACD,GAAD,OAAsBA,EAAmB,OAC5D,KACHG,EAAcD,GAGhB,SAASiB,IACPV,GAAa,GACbW,cAActB,GACdsB,cAAclB,GAiGhB,OAnCAmB,qBAAU,WACY,IAAhBzB,GAA0C,IAArBI,GACvBY,EAAQU,QAAQC,QAGG,IAAjB3B,IACFuB,IACAR,GAAa,GACbK,IACAnB,EAAeS,KAGS,IAAtBN,IACFmB,IACAR,GAAa,GACbG,IACAb,EAAoBG,MAGrB,CAACR,EAAaI,IAEjBqB,qBAAU,WACRxB,EAAeS,GACfL,EAAoBG,KACnB,CAACE,EAAeF,IAYjB,sBAAKoB,UAAU,MAAf,UACE,gDACA,sBAAKC,GAAG,gBAAR,UACE,qBAAKA,GAAG,cAAR,0BACA,qBAAKA,GAAG,eAAR,SAAwBrB,EAAc,KACtC,wBAAQqB,GAAG,kBAAkBC,QArDnC,WACOlB,GACHH,GAAe,SAACD,GACd,OAAIA,EAAc,GACTA,EAAc,GAEdA,MA+CT,oBACA,wBAAQqB,GAAG,kBAAkBC,QAhFnC,WACOlB,GACHH,GAAe,SAACD,GACd,OAAIA,EAAc,KACTA,EAAc,GAEdA,MA0ET,oBAGA,qBAAKqB,GAAG,gBAAR,4BACA,qBAAKA,GAAG,iBAAR,SAA0BnB,EAAgB,KAC1C,wBAAQmB,GAAG,oBAAoBC,QAxErC,WACOlB,GACHD,GAAiB,SAACD,GAChB,OAAIA,EAAgB,GACXA,EAAgB,GAEhBA,MAkET,oBACA,wBAAQmB,GAAG,oBAAoBC,QAnGrC,WACOlB,GACHD,GAAiB,SAACD,GAChB,OAAIA,EAAgB,KACXA,EAAgB,GAEhBA,MA6FT,uBAIF,oBAAImB,GAAG,cAAP,SAAsBf,EAAY,QAAU,YAE5C,qBAAKe,GAAG,YAAR,SAhHJ,SAA2BE,GACzB,IAAMC,EAAOC,KAAKC,MAAMH,EAAU,IAC5BI,EAAOJ,EAAU,GACvB,MAAM,GAAN,OAAUC,EAAO,GAAP,WAAgBA,GAASA,EAAnC,YAA2CG,EAAO,GAAP,WAAgBA,GAASA,GA6G7CC,CAAkBtB,EAAYV,EAAmBJ,KAEtE,uBAAO6B,GAAG,OAAOQ,IAAKrB,EAASsB,IAAK,+HAAgIC,KAAK,UAGzK,wBAAQV,GAAG,aAAaC,QAASlB,EAAYW,EAAYT,EAAYM,EAAkBF,EAAvF,0BACA,wBAAQW,GAAG,QAAQC,QAlCvB,WACEnB,EAAiBb,GACjBW,EA5HuB,KA6HvBR,EAAeH,GACfyB,IACAR,GAAa,IA6BX,uBCtJSyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.37fe2997.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n\nfunction App() {\n\n  const defaultBreakTime = 300;\n  const defaultSessionTime = 1500;\n\n  const [secondsLeft, setSecondsLeft] = useState(defaultSessionTime);\n  const [timer, setTimer] = useState();\n  const [breakSecondsLeft, setBreakSecondsLeft] = useState(defaultBreakTime);\n  const [breakTimer, setBreakTimer] = useState();\n  const [breakLength, setBreakLength] = useState(defaultBreakTime);\n  const [sessionLength, setSessionLength] = useState(defaultSessionTime);\n  const [isTimerOn, setIsTimerOn] = useState(false);\n  const [isOnBreak, setIsOnBreak] = useState(false);\n  const myAudio = useRef();\n\n\n  function startTimer() {\n    setIsTimerOn(true)\n    const timer = setInterval(() => {\n      setSecondsLeft((secondsLeft) => secondsLeft - 1)\n    }, 1000);\n    setTimer(timer)\n  }\n\n  function startBreakTimer() {\n    console.log('isTimerOn : ', isTimerOn)\n    setIsTimerOn(true)\n    const breakTimer = setInterval(() => {\n      setBreakSecondsLeft((breakSecondsLeft) => breakSecondsLeft - 1)\n    }, 1000);\n    setBreakTimer(breakTimer)\n  }\n\n  function stopTimer() {\n    setIsTimerOn(false)\n    clearInterval(timer)\n    clearInterval(breakTimer)\n  }\n\n\n  function convertSecsToMins(seconds) {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins < 10 ? `0${mins}` : mins}:${secs < 10 ? `0${secs}` : secs}`\n  }\n\n\n  function incrementSession() {\n    if (!isTimerOn) {\n      setSessionLength((sessionLength) => {\n        if (sessionLength < 3600) {\n          return sessionLength + 60\n        } else {\n          return sessionLength\n        }\n      })\n\n    }\n  }\n\n  function incrementBreak() {\n    if (!isTimerOn) {\n      setBreakLength((breakLength) => {\n        if (breakLength < 3600) {\n          return breakLength + 60\n        } else {\n          return breakLength\n        }\n      })\n\n    }\n  }\n\n  function decrementSession() {\n    if (!isTimerOn) {\n      setSessionLength((sessionLength) => {\n        if (sessionLength > 60) {\n          return sessionLength - 60\n        } else {\n          return sessionLength\n        }\n      })\n\n    }\n  }\n\n  function decrementBreak() {\n    if (!isTimerOn) {\n      setBreakLength((breakLength) => {\n        if (breakLength > 60) {\n          return breakLength - 60\n        } else {\n          return breakLength\n        }\n      })\n    }\n  }\n\n  useEffect(() => {\n    if (secondsLeft === 0 || breakSecondsLeft === 0) {\n      myAudio.current.play()\n    }\n\n    if (secondsLeft === -1) {\n      stopTimer()\n      setIsOnBreak(true)\n      startBreakTimer()\n      setSecondsLeft(sessionLength)\n    }\n\n    if (breakSecondsLeft === -1) {\n      stopTimer()\n      setIsOnBreak(false)\n      startTimer()\n      setBreakSecondsLeft(breakLength)\n\n    }\n  }, [secondsLeft, breakSecondsLeft])\n\n  useEffect(() => {\n    setSecondsLeft(sessionLength)\n    setBreakSecondsLeft(breakLength)\n  }, [sessionLength, breakLength])\n\n  function reset() {\n    setSessionLength(defaultSessionTime)\n    setBreakLength(defaultBreakTime)\n    setSecondsLeft(defaultSessionTime)\n    stopTimer()\n    setIsOnBreak(false)\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>Pomodoro Timer</h1>\n      <div id=\"time-settings\">\n        <div id=\"break-label\">Break Length</div>\n        <div id=\"break-length\">{breakLength / 60}</div>\n        <button id=\"break-decrement\" onClick={decrementBreak}>-1 min</button>\n        <button id=\"break-increment\" onClick={incrementBreak}>+1 min</button>\n\n\n        <div id=\"session-label\">Session Length</div>\n        <div id=\"session-length\">{sessionLength / 60}</div>\n        <button id=\"session-decrement\" onClick={decrementSession}>-1 min</button>\n        <button id=\"session-increment\" onClick={incrementSession}>+1 min</button>\n      </div>\n\n\n      <h2 id=\"timer-label\">{isOnBreak ? 'Break' : 'Session'}</h2>\n\n      <div id=\"time-left\">{convertSecsToMins(isOnBreak ? breakSecondsLeft : secondsLeft)}</div>\n\n      <audio id=\"beep\" ref={myAudio} src={'https://sampleswap.org/samples-ghost/SOUND%20EFFECTS%20and%20NOISES/Cheesy%20Lo-Fi%20Sound%20Effects/72[kb]Echo-Harp.aif.mp3'} type='audio' />\n\n\n      <button id=\"start_stop\" onClick={isTimerOn ? stopTimer : isOnBreak ? startBreakTimer : startTimer}>⏵⏸</button>\n      <button id=\"reset\" onClick={reset}>reset</button>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}